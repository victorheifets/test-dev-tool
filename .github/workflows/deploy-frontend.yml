name: Deploy Frontend to AWS

on:
  # Manual deployment control - no automatic deployments
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      confirm_deployment:
        description: 'Type "DEPLOY" to confirm deployment'
        required: true
        default: ''
        type: string
      skip_tests:
        description: 'Skip tests (not recommended for production)'
        required: false
        default: false
        type: boolean
  
  # Optional: Run tests on pull requests (no deployment)
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'
      - 'vite.config.ts'
      - 'vite.config.prod.ts'
      - 'tsconfig.json'

env:
  AWS_REGION: eu-west-1
  NODE_VERSION: '18'

jobs:
  # Validation job - safety check before deployment
  validate-deployment:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Validate deployment confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_deployment }}" != "DEPLOY" ]; then
            echo "‚ùå Deployment not confirmed. You must type 'DEPLOY' to proceed."
            exit 1
          fi
          echo "‚úÖ Deployment confirmed"
          
      - name: Validate environment
        run: |
          ENV="${{ github.event.inputs.environment }}"
          echo "üéØ Deploying to: $ENV"
          
          if [ "$ENV" = "production" ]; then
            echo "‚ö†Ô∏è  PRODUCTION DEPLOYMENT - Extra validation required"
            if [ "${{ github.event.inputs.skip_tests }}" = "true" ]; then
              echo "‚ùå Cannot skip tests for production deployment"
              exit 1
            fi
          fi

  # Test and build job
  test-and-build:
    runs-on: ubuntu-latest
    needs: validate-deployment
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        if: github.event.inputs.skip_tests != 'true'
        run: npm run lint

      - name: Run type checking
        if: github.event.inputs.skip_tests != 'true'
        run: npx tsc --noEmit

      - name: Run tests
        if: github.event.inputs.skip_tests != 'true'
        run: npm test -- --run

      - name: Build production
        run: npm run build:prod
        env:
          NODE_ENV: production
          VITE_API_URL: https://lph40ds6v8.execute-api.eu-west-1.amazonaws.com/prod

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.event.inputs.environment || 'pr' }}
          path: dist/
          retention-days: 7

  # Deploy job (manual control only)
  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Set environment variables
        run: |
          ENV="${{ github.event.inputs.environment }}"
          echo "DEPLOYMENT_ENV=$ENV" >> $GITHUB_ENV
          
          if [ "$ENV" = "production" ]; then
            echo "S3_BUCKET=test-dev-tool-prod-764414385399" >> $GITHUB_ENV
            echo "CLOUDFRONT_DISTRIBUTION_ID=E2MY7WM6N3WVGB" >> $GITHUB_ENV
            echo "HEALTH_CHECK_URL=https://d3ld4gkanad66u.cloudfront.net/" >> $GITHUB_ENV
          else
            echo "S3_BUCKET=test-dev-tool-staging-764414385399" >> $GITHUB_ENV
            echo "CLOUDFRONT_DISTRIBUTION_ID=staging-placeholder" >> $GITHUB_ENV
            echo "HEALTH_CHECK_URL=https://staging-placeholder.cloudfront.net/" >> $GITHUB_ENV
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.event.inputs.environment }}
          path: dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: |
          echo "üöÄ Deploying to ${{ env.DEPLOYMENT_ENV }} environment..."
          echo "üì¶ S3 Bucket: ${{ env.S3_BUCKET }}"
          
          # Deploy with proper cache headers
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }}/ --delete \
            --cache-control "public,max-age=31536000,immutable" \
            --exclude "*.html" \
            --exclude "*.json"
          
          # HTML and JSON files with shorter cache
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }}/ \
            --cache-control "public,max-age=300" \
            --include "*.html" \
            --include "*.json" \
            --exclude "*"

      - name: Create CloudFront invalidation
        if: env.DEPLOYMENT_ENV == 'production'
        run: |
          echo "üîÑ Creating CloudFront invalidation..."
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "‚è≥ Waiting for invalidation $INVALIDATION_ID to complete..."
          aws cloudfront wait invalidation-completed \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --id $INVALIDATION_ID
          
          echo "‚úÖ CloudFront invalidation completed"

      - name: Health check
        if: env.DEPLOYMENT_ENV == 'production'
        run: |
          echo "üè• Running health check..."
          sleep 30
          
          # Try to access the deployed application
          if curl -f --max-time 30 ${{ env.HEALTH_CHECK_URL }}; then
            echo "‚úÖ Health check passed - deployment successful!"
          else
            echo "‚ùå Health check failed - deployment may not be accessible yet"
            echo "üîç Check CloudFront distribution status manually"
            exit 1
          fi

      - name: Deployment summary
        run: |
          echo "üéâ Deployment Summary:"
          echo "   Environment: ${{ env.DEPLOYMENT_ENV }}"
          echo "   S3 Bucket: ${{ env.S3_BUCKET }}"
          echo "   CloudFront: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
          echo "   URL: ${{ env.HEALTH_CHECK_URL }}"
          echo "   Deployed by: ${{ github.actor }}"
          echo "   Commit: ${{ github.sha }}"

  # Rollback job (manual trigger)
  rollback:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Rollback to previous version
        run: |
          echo "‚ö†Ô∏è  Manual rollback would be implemented here"
          echo "This would restore the previous S3 content and invalidate CloudFront"
          # Implementation would depend on backup strategy