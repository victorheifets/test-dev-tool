/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Providers
         * @description List all providers (admin/manager access required).
         */
        get: operations["list_providers_api_providers_get"];
        put?: never;
        /**
         * Create Provider
         * @description Create a new provider (admin access required).
         */
        post: operations["create_provider_api_providers_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/providers/{provider_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Provider
         * @description Get a specific provider by provider_id (authenticated access required).
         */
        get: operations["get_provider_api_providers__provider_id__get"];
        /**
         * Update Provider
         * @description Update a specific provider by provider_id (owner or admin access required).
         */
        put: operations["update_provider_api_providers__provider_id__put"];
        post?: never;
        /**
         * Delete Provider
         * @description Delete a specific provider by provider_id (admin access required).
         */
        delete: operations["delete_provider_api_providers__provider_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activities/featured": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Featured Activities
         * @description Get featured activities with authenticated tenant isolation.
         */
        get: operations["get_featured_activities_api_activities_featured_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activities/upcoming": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Upcoming Activities
         * @description Get upcoming activities starting within the specified number of days.
         */
        get: operations["get_upcoming_activities_api_activities_upcoming_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activities/category/{category}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Activities By Category
         * @description Get activities by category with authenticated tenant isolation.
         */
        get: operations["get_activities_by_category_api_activities_category__category__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activities/{item_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Activity Status
         * @description Update just the status of an activity with authenticated tenant isolation.
         */
        patch: operations["update_activity_status_api_activities__item_id__status_patch"];
        trace?: never;
    };
    "/api/activities/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Activities
         * @description Search for activities by name or description with authenticated tenant isolation.
         */
        get: operations["search_activities_api_activities_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activities/provider/{provider_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Activities By Provider
         * @description Get all activities for a specific provider with authenticated tenant isolation.
         *     Only allows access if the requested provider_id matches the authenticated provider.
         */
        get: operations["get_activities_by_provider_api_activities_provider__provider_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Activities
         * @description List activities with optional filters, sorting, and pagination.
         */
        get: operations["read_activities_api_activities_get"];
        put?: never;
        /**
         * Create Activity
         * @description Create a new activity with authenticated tenant isolation.
         */
        post: operations["create_activity_api_activities_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activities/paginated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Activities Paginated
         * @description List activities with optimized cursor-based pagination for better performance.
         *
         *     This endpoint uses cursor-based pagination which provides:
         *     - Consistent performance regardless of page number
         *     - Better scalability for large datasets
         *     - Real-time data consistency
         */
        get: operations["read_activities_paginated_api_activities_paginated_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activities/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Activity
         * @description Get a specific activity by ID with authenticated tenant isolation.
         */
        get: operations["read_activity_api_activities__item_id__get"];
        /**
         * Update Activity
         * @description Update an activity with authenticated tenant isolation.
         */
        put: operations["update_activity_api_activities__item_id__put"];
        post?: never;
        /**
         * Delete Activity
         * @description Delete an activity with authenticated tenant isolation.
         */
        delete: operations["delete_activity_api_activities__item_id__delete"];
        options?: never;
        head?: never;
        /**
         * Patch Activity
         * @description Partially update an activity.
         */
        patch: operations["patch_activity_api_activities__item_id__patch"];
        trace?: never;
    };
    "/api/activities/trainer/{trainer_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Activities By Trainer
         * @description Get all activities for a specific trainer with authenticated tenant isolation.
         */
        get: operations["get_activities_by_trainer_api_activities_trainer__trainer_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/participants/email/{email}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Participant By Email
         * @description Get a participant by email address with authenticated tenant isolation.
         */
        get: operations["get_participant_by_email_api_participants_email__email__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/participants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Participants
         * @description List participants with authenticated tenant isolation.
         */
        get: operations["list_participants_api_participants_get"];
        put?: never;
        /**
         * Create Participant
         * @description Create a new participant with authenticated tenant isolation.
         */
        post: operations["create_participant_api_participants_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/participants/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Participant
         * @description Get a specific participant by ID with authenticated tenant isolation.
         */
        get: operations["get_participant_api_participants__item_id__get"];
        /**
         * Update Participant
         * @description Update a participant with authenticated tenant isolation.
         */
        put: operations["update_participant_api_participants__item_id__put"];
        post?: never;
        /**
         * Delete Participant
         * @description Delete a participant with authenticated tenant isolation.
         */
        delete: operations["delete_participant_api_participants__item_id__delete"];
        options?: never;
        head?: never;
        /**
         * Patch Participant
         * @description Partially update a participant with authenticated tenant isolation.
         */
        patch: operations["patch_participant_api_participants__item_id__patch"];
        trace?: never;
    };
    "/api/enrollments/participant/{participant_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Enrollments By Participant
         * @description Get all enrollments for a specific participant with authenticated tenant isolation.
         */
        get: operations["get_enrollments_by_participant_api_enrollments_participant__participant_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/enrollments/activity/{activity_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Enrollments By Activity
         * @description Get all enrollments for a specific activity with authenticated tenant isolation.
         */
        get: operations["get_enrollments_by_activity_api_enrollments_activity__activity_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/enrollments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Enrollments
         * @description List enrollments with authenticated tenant isolation and optional filtering.
         */
        get: operations["list_enrollments_api_enrollments_get"];
        put?: never;
        /**
         * Create Enrollment
         * @description Create a new enrollment with authenticated tenant isolation and business logic validation.
         */
        post: operations["create_enrollment_api_enrollments_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/enrollments/status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Enrollments By Status
         * @description Get all enrollments with a specific status with authenticated tenant isolation.
         */
        get: operations["get_enrollments_by_status_api_enrollments_status__status__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/enrollments/recent/{days}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Recent Enrollments
         * @description Get enrollments created within the last specified number of days with authenticated tenant isolation.
         */
        get: operations["get_recent_enrollments_api_enrollments_recent__days__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/enrollments/{enrollment_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Enrollment Status
         * @description Update only the status of an enrollment with authenticated tenant isolation.
         */
        patch: operations["update_enrollment_status_api_enrollments__enrollment_id__status_patch"];
        trace?: never;
    };
    "/api/enrollments/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Enrollments
         * @description Search enrollments with authenticated tenant isolation.
         */
        get: operations["search_enrollments_api_enrollments_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/enrollments/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Enrollment
         * @description Get a specific enrollment by ID with authenticated tenant isolation.
         */
        get: operations["get_enrollment_api_enrollments__item_id__get"];
        /**
         * Update Enrollment
         * @description Update an enrollment with authenticated tenant isolation.
         */
        put: operations["update_enrollment_api_enrollments__item_id__put"];
        post?: never;
        /**
         * Delete Enrollment
         * @description Delete an enrollment with authenticated tenant isolation.
         */
        delete: operations["delete_enrollment_api_enrollments__item_id__delete"];
        options?: never;
        head?: never;
        /**
         * Patch Enrollment
         * @description Partially update an enrollment with authenticated tenant isolation.
         */
        patch: operations["patch_enrollment_api_enrollments__item_id__patch"];
        trace?: never;
    };
    "/api/marketing/leads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Leads
         * @description List leads with authenticated tenant isolation and optional filtering.
         */
        get: operations["list_leads_api_marketing_leads_get"];
        put?: never;
        /**
         * Create Lead
         * @description Create a new lead with authenticated tenant isolation.
         */
        post: operations["create_lead_api_marketing_leads_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/marketing/leads/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Lead
         * @description Get a specific lead by ID with authenticated tenant isolation.
         */
        get: operations["get_lead_api_marketing_leads__item_id__get"];
        /**
         * Update Lead
         * @description Update a lead with authenticated tenant isolation.
         */
        put: operations["update_lead_api_marketing_leads__item_id__put"];
        post?: never;
        /**
         * Delete Lead
         * @description Delete a lead with authenticated tenant isolation.
         */
        delete: operations["delete_lead_api_marketing_leads__item_id__delete"];
        options?: never;
        head?: never;
        /**
         * Patch Lead
         * @description Partially update a lead with authenticated tenant isolation.
         */
        patch: operations["patch_lead_api_marketing_leads__item_id__patch"];
        trace?: never;
    };
    "/api/marketing/leads/by-source/{source}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Leads By Source
         * @description Get all leads from a specific source with authenticated tenant isolation.
         */
        get: operations["get_leads_by_source_api_marketing_leads_by_source__source__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/marketing/leads/by-status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Leads By Status
         * @description Get all leads with a specific status with authenticated tenant isolation.
         */
        get: operations["get_leads_by_status_api_marketing_leads_by_status__status__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/marketing/leads/{lead_id}/convert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Convert Lead To Participant
         * @description Convert a lead to a participant and enroll them in an activity with authenticated tenant isolation.
         */
        post: operations["convert_lead_to_participant_api_marketing_leads__lead_id__convert_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/activities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Public Activities
         * @description List public activities/courses
         *
         *     This endpoint provides a public-facing view of available activities with basic information.
         *     It's designed for unauthenticated access to course listings.
         */
        get: operations["list_public_activities_api_public_activities_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/activities/{activity_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Public Activity
         * @description Get details for a specific public activity/course
         *
         *     This endpoint provides detailed information about a specific course for public viewing.
         */
        get: operations["get_public_activity_api_public_activities__activity_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Public Providers
         * @description List public providers
         *
         *     This endpoint provides a public-facing view of available course providers.
         */
        get: operations["list_public_providers_api_public_providers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/providers/{provider_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Public Provider
         * @description Get details for a specific public provider
         *
         *     This endpoint provides detailed information about a specific course provider for public viewing.
         */
        get: operations["get_public_provider_api_public_providers__provider_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/public/providers/{provider_id}/activities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Provider Activities
         * @description Get all activities/courses for a specific provider
         *
         *     This endpoint provides a list of all courses offered by a specific provider.
         */
        get: operations["get_provider_activities_api_public_providers__provider_id__activities_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Basic health check endpoint that returns service status and uptime.
         *
         *     This endpoint is used by monitoring tools to check if the API is responsive.
         */
        get: operations["health_check_api_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health/errors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Error Statistics
         * @description Get error statistics for monitoring and alerting.
         *
         *     Returns error counts by type and endpoint for service monitoring.
         */
        get: operations["error_statistics_api_health_errors_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health/errors/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset Error Statistics
         * @description Reset error statistics (admin function).
         *
         *     Clears all error counters and resets tracking.
         */
        post: operations["reset_error_statistics_api_health_errors_reset_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health/detailed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Detailed Health Check
         * @description Detailed health check including database and external dependencies.
         *
         *     Returns comprehensive system status for monitoring dashboards.
         */
        get: operations["detailed_health_check_api_health_detailed_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/activities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Activities
         * @description Search activities by name or description
         */
        get: operations["search_activities_api_search_activities_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/participants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Participants
         * @description Search participants by name or email
         */
        get: operations["search_participants_api_search_participants_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search
         * @description Search across multiple resource types
         *
         *     This endpoint allows searching across activities, providers, and participants.
         *     Use the 'type' parameter to restrict search to a specific resource type.
         */
        get: operations["search_api_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login
         * @description Authenticate user and return JWT tokens
         */
        post: operations["login_api_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Token
         * @description Refresh access token using refresh token
         */
        post: operations["refresh_token_api_auth_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Info
         * @description Get current authenticated user information
         */
        get: operations["get_current_user_info_api_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description Logout user (in a real app, you might blacklist the token)
         */
        post: operations["logout_api_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dev/auth/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Dev Providers
         * @description Get list of available development providers.
         *
         *     DEV MODE ONLY - This endpoint is disabled in production.
         */
        get: operations["get_dev_providers_api_dev_auth_providers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dev/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Dev Login
         * @description Development-only login endpoint.
         *
         *     This endpoint allows developers to quickly switch between providers
         *     for testing multi-tenant functionality. It returns a valid JWT token
         *     that works with the regular authentication system.
         *
         *     DEV MODE ONLY - This endpoint is disabled in production.
         */
        post: operations["dev_login_api_dev_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dev/auth/quick-switch/{provider_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Quick Switch Provider
         * @description Quick switch to a predefined provider.
         *
         *     DEV MODE ONLY - This endpoint is disabled in production.
         */
        post: operations["quick_switch_provider_api_dev_auth_quick_switch__provider_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dev/auth/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current Dev User
         * @description Get current authenticated user info.
         *
         *     This endpoint works with both dev and production tokens.
         */
        get: operations["get_current_dev_user_api_dev_auth_current_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dev-login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Dev Login Page
         * @description Serve the dev login page
         */
        get: operations["dev_login_page_dev_login_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Root */
        get: operations["read_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/test/comprehensive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Run Comprehensive Tests
         * @description Run comprehensive test suite and return results
         */
        get: operations["run_comprehensive_tests_api_test_comprehensive_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Activity
         * @description Complete activity schema with all fields
         */
        Activity: {
            /** Id */
            id?: string | null;
            /** Provider Id */
            provider_id?: string | null;
            /** Created At */
            created_at?: string | null;
            /** Updated At */
            updated_at?: string | null;
            /** Is Active */
            is_active?: boolean | null;
            /**
             * Name
             * @description Activity name
             */
            name: string;
            /**
             * Description
             * @description Activity description
             */
            description?: string | null;
            /**
             * Capacity
             * @description Maximum participants
             */
            capacity?: number | null;
            /**
             * Start Date
             * @description Activity start date
             */
            start_date?: string | null;
            /**
             * End Date
             * @description Activity end date
             */
            end_date?: string | null;
            /**
             * @description Activity status
             * @default draft
             */
            status: components["schemas"]["ActivityStatus"];
            /**
             * Location
             * @description Activity location
             */
            location?: string | null;
            /**
             * @description Type of activity
             * @default course
             */
            type: components["schemas"]["ActivityType"];
            /**
             * Price
             * @description Price in local currency
             */
            price?: string | null;
            /**
             * Currency
             * @description Currency code
             * @default USD
             */
            currency: string;
            /**
             * Category
             * @description Activity category
             */
            category?: string | null;
            /**
             * Featured
             * @description Whether this activity is featured
             * @default false
             */
            featured: boolean;
            /**
             * Enrollments Count
             * @description Number of current enrollments
             * @default 0
             */
            enrollments_count: number;
            /**
             * Available Spots
             * @description Available spots remaining
             * @default 0
             */
            available_spots: number;
            /**
             * Is Fully Booked
             * @description Whether activity is at capacity
             * @default false
             */
            is_fully_booked: boolean;
        } & {
            [key: string]: unknown;
        };
        /**
         * ActivityCreate
         * @description Schema for creating a new activity
         * @example {
         *       "name": "Morning Yoga",
         *       "description": "Relaxing yoga session to start your day",
         *       "capacity": 20,
         *       "price": 25,
         *       "start_date": "2024-01-15",
         *       "end_date": "2024-01-15",
         *       "type": "course",
         *       "status": "draft"
         *     }
         */
        ActivityCreate: {
            /**
             * Name
             * @description Activity name
             */
            name: string;
            /**
             * Description
             * @description Activity description
             */
            description?: string | null;
            /**
             * Capacity
             * @description Maximum participants
             */
            capacity?: number | null;
            /**
             * Start Date
             * @description Activity start date
             */
            start_date?: string | null;
            /**
             * End Date
             * @description Activity end date
             */
            end_date?: string | null;
            /**
             * @description Activity status
             * @default draft
             */
            status: components["schemas"]["ActivityStatus"];
            /**
             * Location
             * @description Activity location
             */
            location?: string | null;
            /**
             * @description Type of activity
             * @default course
             */
            type: components["schemas"]["ActivityType"];
            /**
             * Price
             * @description Price in local currency
             */
            price?: number | string | null;
            /**
             * Currency
             * @description Currency code
             * @default USD
             */
            currency: string;
            /**
             * Category
             * @description Activity category
             */
            category?: string | null;
            /**
             * Featured
             * @description Whether this activity is featured
             * @default false
             */
            featured: boolean;
        };
        /**
         * ActivityStatus
         * @description Activity status enumeration
         * @enum {string}
         */
        ActivityStatus: "draft" | "published" | "ongoing" | "completed" | "cancelled";
        /**
         * ActivityType
         * @description Activity type enumeration
         * @enum {string}
         */
        ActivityType: "course" | "workshop" | "seminar" | "webinar" | "other";
        /**
         * ActivityUpdate
         * @description Schema for updating activity information
         */
        ActivityUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Capacity */
            capacity?: number | null;
            /** Start Date */
            start_date?: string | null;
            /** End Date */
            end_date?: string | null;
            status?: components["schemas"]["ActivityStatus"] | null;
            /** Location */
            location?: string | null;
            type?: components["schemas"]["ActivityType"] | null;
            /** Price */
            price?: number | string | null;
            /** Currency */
            currency?: string | null;
            /** Category */
            category?: string | null;
            /** Featured */
            featured?: boolean | null;
            /** Is Active */
            is_active?: boolean | null;
        };
        /**
         * DevLoginRequest
         * @description Development login request - select a provider to impersonate
         */
        DevLoginRequest: {
            /** Provider Id */
            provider_id: string;
            /**
             * Provider Name
             * @default Development Provider
             */
            provider_name: string;
            /**
             * User Name
             * @default Dev User
             */
            user_name: string;
            /**
             * User Email
             * @default dev@example.com
             */
            user_email: string;
        };
        /**
         * DevLoginResponse
         * @description Development login response with JWT token
         */
        DevLoginResponse: {
            /** Access Token */
            access_token: string;
            /**
             * Token Type
             * @default bearer
             */
            token_type: string;
            /** Provider Id */
            provider_id: string;
            /** Provider Name */
            provider_name: string;
            /** User Name */
            user_name: string;
            /** User Email */
            user_email: string;
            /**
             * Expires At
             * Format: date-time
             */
            expires_at: string;
            /**
             * Warning
             * @default DEV MODE ONLY - DO NOT USE IN PRODUCTION
             */
            warning: string;
        };
        /**
         * DevProvider
         * @description Available development providers
         */
        DevProvider: {
            /** Provider Id */
            provider_id: string;
            /** Provider Name */
            provider_name: string;
            /** Description */
            description: string;
            /** Has Sample Data */
            has_sample_data: boolean;
        };
        /**
         * Enrollment
         * @description Complete enrollment schema with all fields
         */
        Enrollment: {
            /** Id */
            id?: string | null;
            /** Provider Id */
            provider_id?: string | null;
            /** Created At */
            created_at?: string | null;
            /** Updated At */
            updated_at?: string | null;
            /** Is Active */
            is_active?: boolean | null;
            /**
             * Activity Id
             * Format: uuid
             * @description Activity being enrolled in
             */
            activity_id: string;
            /**
             * Participant Id
             * Format: uuid
             * @description Participant enrolling
             */
            participant_id: string;
            /**
             * @description Enrollment status
             * @default pending
             */
            status: components["schemas"]["EnrollmentStatus"];
            /**
             * Enrollment Date
             * Format: date-time
             * @description When enrollment was created
             */
            enrollment_date?: string;
            /**
             * Notes
             * @description Additional notes
             */
            notes?: string | null;
            /**
             * Special Requirements
             * @description Special accommodations needed
             */
            special_requirements?: string | null;
            /**
             * Days Remaining
             * @description Days until activity starts/ends
             */
            days_remaining?: number | null;
        } & {
            [key: string]: unknown;
        };
        /**
         * EnrollmentCreate
         * @description Schema for creating a new enrollment
         * @example {
         *       "activity_id": "123e4567-e89b-12d3-a456-426614174000",
         *       "participant_id": "987fcdeb-51a2-43d1-b123-456789abcdef",
         *       "status": "pending"
         *     }
         */
        EnrollmentCreate: {
            /**
             * Activity Id
             * Format: uuid
             * @description Activity being enrolled in
             */
            activity_id: string;
            /**
             * Participant Id
             * Format: uuid
             * @description Participant enrolling
             */
            participant_id: string;
            /**
             * @description Initial status
             * @default pending
             */
            status: components["schemas"]["EnrollmentStatus"] | null;
            /**
             * Enrollment Date
             * @description When enrollment was created
             */
            enrollment_date?: string | null;
            /**
             * Notes
             * @description Additional notes
             */
            notes?: string | null;
            /**
             * Special Requirements
             * @description Special accommodations needed
             */
            special_requirements?: string | null;
        };
        /**
         * EnrollmentStatus
         * @description Enrollment status enumeration
         * @enum {string}
         */
        EnrollmentStatus: "pending" | "confirmed" | "cancelled" | "completed" | "waitlisted" | "no_show" | "in_progress";
        /**
         * EnrollmentUpdate
         * @description Schema for updating enrollment information
         */
        EnrollmentUpdate: {
            status?: components["schemas"]["EnrollmentStatus"] | null;
            /** Notes */
            notes?: string | null;
            /** Special Requirements */
            special_requirements?: string | null;
            /** Is Active */
            is_active?: boolean | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * Lead
         * @description Complete lead schema with all fields
         */
        Lead: {
            /** Id */
            id?: string | null;
            /** Provider Id */
            provider_id?: string | null;
            /** Created At */
            created_at?: string | null;
            /** Updated At */
            updated_at?: string | null;
            /** Is Active */
            is_active?: boolean | null;
            /**
             * First Name
             * @description First name
             */
            first_name: string;
            /**
             * Last Name
             * @description Last name
             */
            last_name: string;
            /**
             * Email
             * Format: email
             * @description Email address
             */
            email: string;
            /**
             * Phone
             * @description Phone number
             */
            phone?: string | null;
            /**
             * @description How lead was acquired
             * @default website
             */
            source: components["schemas"]["LeadSource"];
            /**
             * @description Current lead status
             * @default new
             */
            status: components["schemas"]["LeadStatus"];
            /**
             * Activity Of Interest
             * @description Activity ID they're interested in
             */
            activity_of_interest?: string | null;
            /**
             * Notes
             * @description Additional notes
             */
            notes?: string | null;
            /**
             * Full Name
             * @description Full name (computed)
             */
            full_name?: string | null;
        } & {
            [key: string]: unknown;
        };
        /**
         * LeadCreate
         * @description Schema for creating a new lead
         * @example {
         *       "first_name": "Jane",
         *       "last_name": "Smith",
         *       "email": "jane.smith@example.com",
         *       "phone": "+1-555-456-7890",
         *       "source": "website",
         *       "status": "new",
         *       "notes": "Interested in yoga classes"
         *     }
         */
        LeadCreate: {
            /** First Name */
            first_name: string;
            /** Last Name */
            last_name: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Phone */
            phone?: string | null;
            /** @default website */
            source: components["schemas"]["LeadSource"] | null;
            /** @default new */
            status: components["schemas"]["LeadStatus"] | null;
            /** Activity Of Interest */
            activity_of_interest?: string | null;
            /** Notes */
            notes?: string | null;
        };
        /**
         * LeadSource
         * @description Lead source enumeration
         * @enum {string}
         */
        LeadSource: "website" | "referral" | "social_media" | "email" | "advertisement" | "other";
        /**
         * LeadStatus
         * @description Lead status enumeration
         * @enum {string}
         */
        LeadStatus: "new" | "contacted" | "qualified" | "converted" | "lost";
        /**
         * LeadUpdate
         * @description Schema for updating lead information
         */
        LeadUpdate: {
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Email */
            email?: string | null;
            /** Phone */
            phone?: string | null;
            source?: components["schemas"]["LeadSource"] | null;
            status?: components["schemas"]["LeadStatus"] | null;
            /** Activity Of Interest */
            activity_of_interest?: string | null;
            /** Notes */
            notes?: string | null;
            /** Is Active */
            is_active?: boolean | null;
        };
        /** LoginRequest */
        LoginRequest: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
        };
        /** PaginatedResponse[Activity] */
        PaginatedResponse_Activity_: {
            /**
             * Items
             * @description List of items in this page
             */
            items: components["schemas"]["Activity"][];
            /**
             * Count
             * @description Number of items in this page
             */
            count: number;
            /**
             * Total
             * @description Total number of items (if available)
             */
            total?: number | null;
            /**
             * Has More
             * @description Whether there are more items available
             */
            has_more: boolean;
            /**
             * Next Cursor
             * @description Cursor for next page
             */
            next_cursor?: string | null;
        };
        /**
         * Participant
         * @description Complete participant schema with all fields
         */
        Participant: {
            /** Id */
            id?: string | null;
            /** Provider Id */
            provider_id?: string | null;
            /** Created At */
            created_at?: string | null;
            /** Updated At */
            updated_at?: string | null;
            /** Is Active */
            is_active?: boolean | null;
            /**
             * First Name
             * @description First name
             */
            first_name: string;
            /**
             * Last Name
             * @description Last name
             */
            last_name: string;
            /**
             * Email
             * Format: email
             * @description Email address
             */
            email: string;
            /**
             * Phone
             * @description Phone number
             */
            phone?: string | null;
            /**
             * Date Of Birth
             * @description Date of birth
             */
            date_of_birth?: string | null;
            /**
             * Address
             * @description Physical address
             */
            address?: string | null;
            /**
             * Emergency Contact
             * @description Emergency contact name
             */
            emergency_contact?: string | null;
            /**
             * Emergency Phone
             * @description Emergency contact phone
             */
            emergency_phone?: string | null;
            /**
             * Full Name
             * @description Full name (computed)
             */
            full_name?: string | null;
            /**
             * Enrollments Count
             * @description Number of current enrollments
             * @default 0
             */
            enrollments_count: number;
        } & {
            [key: string]: unknown;
        };
        /**
         * ParticipantCreate
         * @description Schema for creating a new participant
         * @example {
         *       "first_name": "John",
         *       "last_name": "Doe",
         *       "email": "john.doe@example.com",
         *       "phone": "+1-555-123-4567",
         *       "date_of_birth": "1990-01-01"
         *     }
         */
        ParticipantCreate: {
            /**
             * First Name
             * @description First name
             */
            first_name: string;
            /**
             * Last Name
             * @description Last name
             */
            last_name: string;
            /**
             * Email
             * Format: email
             * @description Email address
             */
            email: string;
            /**
             * Phone
             * @description Phone number
             */
            phone?: string | null;
            /**
             * Date Of Birth
             * @description Date of birth
             */
            date_of_birth?: string | null;
            /**
             * Address
             * @description Physical address
             */
            address?: string | null;
            /**
             * Emergency Contact
             * @description Emergency contact name
             */
            emergency_contact?: string | null;
            /**
             * Emergency Phone
             * @description Emergency contact phone
             */
            emergency_phone?: string | null;
        };
        /**
         * ParticipantUpdate
         * @description Schema for updating participant information
         */
        ParticipantUpdate: {
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Email */
            email?: string | null;
            /** Phone */
            phone?: string | null;
            /** Date Of Birth */
            date_of_birth?: string | null;
            /** Address */
            address?: string | null;
            /** Emergency Contact */
            emergency_contact?: string | null;
            /** Emergency Phone */
            emergency_phone?: string | null;
            /** Is Active */
            is_active?: boolean | null;
        };
        /**
         * Provider
         * @description Complete provider schema with all fields
         */
        Provider: {
            /** Id */
            id?: string | null;
            /** Provider Id */
            provider_id?: string | null;
            /** Created At */
            created_at?: string | null;
            /** Updated At */
            updated_at?: string | null;
            /** Is Active */
            is_active?: boolean | null;
            /**
             * Name
             * @description Provider name
             */
            name: string;
            /**
             * Description
             * @description Provider description
             */
            description?: string | null;
            /**
             * Email
             * Format: email
             * @description Contact email
             */
            email: string;
            /**
             * Phone
             * @description Contact phone number
             */
            phone?: string | null;
            /**
             * Website
             * Format: uri
             * @description Website URL
             */
            website?: string | null;
            /**
             * Address
             * @description Physical address
             */
            address?: string | null;
            /**
             * Logo Url
             * @description Logo image URL
             */
            logo_url?: string | null;
        } & {
            [key: string]: unknown;
        };
        /**
         * ProviderCreate
         * @description Schema for creating a new provider
         * @example {
         *       "name": "Wellness Studio",
         *       "email": "info@wellnessstudio.com",
         *       "description": "Premier wellness and fitness studio",
         *       "phone": "+1-555-987-6543",
         *       "website": "https://wellnessstudio.com",
         *       "address": "123 Health St, Wellness City, WC 12345"
         *     }
         */
        ProviderCreate: {
            /**
             * Name
             * @description Provider name
             */
            name: string;
            /**
             * Description
             * @description Provider description
             */
            description?: string | null;
            /**
             * Email
             * Format: email
             * @description Contact email
             */
            email: string;
            /**
             * Phone
             * @description Contact phone number
             */
            phone?: string | null;
            /**
             * Website
             * Format: uri
             * @description Website URL
             */
            website?: string | null;
            /**
             * Address
             * @description Physical address
             */
            address?: string | null;
            /**
             * Logo Url
             * @description Logo image URL
             */
            logo_url?: string | null;
        };
        /**
         * ProviderUpdate
         * @description Schema for updating provider information
         */
        ProviderUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Email */
            email?: string | null;
            /** Phone */
            phone?: string | null;
            /** Website */
            website?: string | null;
            /** Address */
            address?: string | null;
            /** Logo Url */
            logo_url?: string | null;
            /** Is Active */
            is_active?: boolean | null;
        };
        /** RefreshTokenRequest */
        RefreshTokenRequest: {
            /** Refresh Token */
            refresh_token: string;
        };
        /** TokenResponse */
        TokenResponse: {
            /** Access Token */
            access_token: string;
            /** Refresh Token */
            refresh_token: string;
            /**
             * Token Type
             * @default bearer
             */
            token_type: string;
            /**
             * Expires In
             * @default 1800
             */
            expires_in: number;
        };
        /** UserResponse */
        UserResponse: {
            /** User Id */
            user_id: string;
            /** Email */
            email: string;
            /** Name */
            name: string;
            /** Role */
            role: string;
            /** Provider Id */
            provider_id?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        ValidationPatterns: {
            /** @description Email validation pattern */
            email?: string;
            /** @description Phone number validation pattern */
            phone?: string;
            /** @description UUID validation pattern */
            uuid?: string;
            /** @description Currency code validation pattern */
            currency?: string;
        };
        PaginationParams: {
            /**
             * @description Number of items to return
             * @default 50
             */
            limit: number;
            /** @description Cursor for pagination continuation */
            cursor?: string | null;
        };
        PaginatedResponse: {
            /** @description List of items in this page */
            items: Record<string, never>[];
            /** @description Number of items in this page */
            count: number;
            /** @description Total number of items (if available) */
            total?: number | null;
            /** @description Whether there are more items available */
            has_more: boolean;
            /** @description Cursor for next page */
            next_cursor?: string | null;
        };
        APIError: {
            /** @constant */
            error: true;
            /** @description Machine-readable error code */
            error_code: string;
            /** @description Human-readable error message */
            message: string;
            /** @description API endpoint path */
            path: string;
            /** @description Unique request identifier */
            request_id: string;
            /**
             * Format: date-time
             * @description Error timestamp
             */
            timestamp: string;
            /** @description Additional error details */
            details?: Record<string, never>[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_providers_api_providers_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Provider"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_provider_api_providers_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProviderCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Provider"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_provider_api_providers__provider_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Provider"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_provider_api_providers__provider_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProviderUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Provider"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_provider_api_providers__provider_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_featured_activities_api_activities_featured_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: {
                "x-provider-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_upcoming_activities_api_activities_upcoming_get: {
        parameters: {
            query?: {
                days?: number;
                limit?: number;
            };
            header?: {
                "x-provider-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_activities_by_category_api_activities_category__category__get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                category: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_activity_status_api_activities__item_id__status_patch: {
        parameters: {
            query: {
                /** @description New status for the activity */
                status: components["schemas"]["ActivityStatus"];
            };
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_activities_api_activities_search_get: {
        parameters: {
            query: {
                query: string;
            };
            header?: {
                "x-provider-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_activities_by_provider_api_activities_provider__provider_id__get: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_activities_api_activities_get: {
        parameters: {
            query?: {
                status?: string | null;
                category?: string | null;
                level?: string | null;
                featured?: boolean | null;
                search?: string | null;
                start_date?: string | null;
                end_date?: string | null;
                /** @description Field to sort by */
                sort_by?: string | null;
                sort_order?: string;
                page?: number | null;
                page_size?: number | null;
            };
            header?: {
                "x-provider-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_activity_api_activities_post: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ActivityCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_activities_paginated_api_activities_paginated_get: {
        parameters: {
            query?: {
                limit?: number;
                cursor?: string | null;
                provider_id?: string | null;
                is_active?: boolean | null;
                search?: string | null;
                sort_by?: string | null;
                sort_order?: string | null;
            };
            header?: {
                "x-provider-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_Activity_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_activity_api_activities__item_id__get: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_activity_api_activities__item_id__put: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ActivityUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_activity_api_activities__item_id__delete: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_activity_api_activities__item_id__patch: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ActivityUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_activities_by_trainer_api_activities_trainer__trainer_id__get: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                trainer_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_participant_by_email_api_participants_email__email__get: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Participant"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_participants_api_participants_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: {
                "x-provider-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Participant"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_participant_api_participants_post: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ParticipantCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Participant"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_participant_api_participants__item_id__get: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Participant"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_participant_api_participants__item_id__put: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ParticipantUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Participant"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_participant_api_participants__item_id__delete: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_participant_api_participants__item_id__patch: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ParticipantUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Participant"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_enrollments_by_participant_api_enrollments_participant__participant_id__get: {
        parameters: {
            query?: {
                /** @description Filter by enrollment status */
                status?: string | null;
                /** @description Filter by enrollment date (start range) */
                start_date?: string | null;
                /** @description Filter by enrollment date (end range) */
                end_date?: string | null;
            };
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                participant_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Enrollment"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_enrollments_by_activity_api_enrollments_activity__activity_id__get: {
        parameters: {
            query?: {
                /** @description Filter by enrollment status */
                status?: string | null;
                /** @description Filter by enrollment date (start range) */
                start_date?: string | null;
                /** @description Filter by enrollment date (end range) */
                end_date?: string | null;
            };
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                activity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Enrollment"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_enrollments_api_enrollments_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                /** @description Filter by enrollment status */
                status?: string | null;
                /** @description Filter by enrollment date (start range) */
                start_date?: string | null;
                /** @description Filter by enrollment date (end range) */
                end_date?: string | null;
            };
            header?: {
                "x-provider-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Enrollment"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_enrollment_api_enrollments_post: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EnrollmentCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Enrollment"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_enrollments_by_status_api_enrollments_status__status__get: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                status: components["schemas"]["EnrollmentStatus"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Enrollment"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_recent_enrollments_api_enrollments_recent__days__get: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                days: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Enrollment"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_enrollment_status_api_enrollments__enrollment_id__status_patch: {
        parameters: {
            query: {
                status_value: components["schemas"]["EnrollmentStatus"];
            };
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                enrollment_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Enrollment"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_enrollments_api_enrollments_search_get: {
        parameters: {
            query?: {
                /** @description Search query string */
                query?: string;
                /** @description Filter by enrollment status */
                status?: string | null;
                /** @description Filter by enrollment date (start range) */
                start_date?: string | null;
                /** @description Filter by enrollment date (end range) */
                end_date?: string | null;
            };
            header?: {
                "x-provider-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Enrollment"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_enrollment_api_enrollments__item_id__get: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Enrollment"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_enrollment_api_enrollments__item_id__put: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EnrollmentUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Enrollment"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_enrollment_api_enrollments__item_id__delete: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_enrollment_api_enrollments__item_id__patch: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EnrollmentUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Enrollment"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_leads_api_marketing_leads_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                /** @description Filter by lead status */
                status?: string | null;
                /** @description Filter by lead source */
                source?: string | null;
            };
            header?: {
                "x-provider-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Lead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_lead_api_marketing_leads_post: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LeadCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Lead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_lead_api_marketing_leads__item_id__get: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Lead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_lead_api_marketing_leads__item_id__put: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LeadUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Lead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_lead_api_marketing_leads__item_id__delete: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    patch_lead_api_marketing_leads__item_id__patch: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LeadUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Lead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_leads_by_source_api_marketing_leads_by_source__source__get: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                source: components["schemas"]["LeadSource"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Lead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_leads_by_status_api_marketing_leads_by_status__status__get: {
        parameters: {
            query?: never;
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                status: components["schemas"]["LeadStatus"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Lead"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    convert_lead_to_participant_api_marketing_leads__lead_id__convert_post: {
        parameters: {
            query: {
                activity_id: string;
            };
            header?: {
                "x-provider-id"?: string | null;
            };
            path: {
                lead_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_public_activities_api_public_activities_get: {
        parameters: {
            query?: {
                /** @description Filter by activity status */
                status?: string | null;
                /** @description Filter by provider ID */
                provider_id?: string | null;
                /** @description Maximum number of activities to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_public_activity_api_public_activities__activity_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                activity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_public_providers_api_public_providers_get: {
        parameters: {
            query?: {
                /** @description Maximum number of providers to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Provider"][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_public_provider_api_public_providers__provider_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Provider"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_provider_activities_api_public_providers__provider_id__activities_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health_check_api_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    error_statistics_api_health_errors_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    reset_error_statistics_api_health_errors_reset_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    detailed_health_check_api_health_detailed_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    search_activities_api_search_activities_get: {
        parameters: {
            query: {
                /** @description Search query string */
                q: string;
                /** @description Maximum number of results to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_participants_api_search_participants_get: {
        parameters: {
            query: {
                /** @description Search query string */
                q: string;
                /** @description Maximum number of results to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    search_api_search_get: {
        parameters: {
            query: {
                /** @description Search query string */
                q: string;
                /** @description Type of resource to search (activity, provider, participant, enrollment) */
                type?: string | null;
                /** @description Maximum number of results to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_api_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_token_api_auth_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_user_info_api_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    logout_api_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_dev_providers_api_dev_auth_providers_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevProvider"][];
                };
            };
        };
    };
    dev_login_api_dev_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DevLoginRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevLoginResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    quick_switch_provider_api_dev_auth_quick_switch__provider_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DevLoginResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_dev_user_api_dev_auth_current_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    dev_login_page_dev_login_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
        };
    };
    read_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    run_comprehensive_tests_api_test_comprehensive_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
